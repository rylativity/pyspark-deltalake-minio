version: '2'

services:
  spark:
    image: docker.io/bitnami/spark:3
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8080:8080'
      - '7077:7077'
    volumes:
      - ./data:/data
  spark-worker:
    image: docker.io/bitnami/spark:3
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./data:/data
  jupyter:
    build: ./jupyter/
    ports: 
      - 8888:8888
    volumes:
      - ./data:/data
      - ./jupyter/notebooks/:/notebooks/
  minio:
    image: quay.io/minio/minio
    command: ["server", "/data", "--console-address", ":9090"]
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    volumes:
      - minio-data:/data
    ports:
      - 9090:9090
      - 9000:9000
  minio-init:
    image: minio/mc # MinioClient image; use it to make buckets and perform any other tasks on startup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 3;
      /usr/bin/mc alias set myminio http://minio:9000 minio minio123;
      /usr/bin/mc mb myminio/test;
      /usr/bin/mc policy set public myminio/test;
      /usr/bin/mc admin user svcacct add --access-key 'trinohiveaccesskey' --secret-key 'trinohivesupersecretkey' myminio minio;
      exit 0;
      "
      
volumes:
  minio-data:
